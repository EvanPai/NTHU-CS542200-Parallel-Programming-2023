[1mdiff --git a/src/ucp/core/ucp_worker.c b/src/ucp/core/ucp_worker.c[m
[1mindex 5adcee9..71bcdf1 100644[m
[1m--- a/src/ucp/core/ucp_worker.c[m
[1m+++ b/src/ucp/core/ucp_worker.c[m
[36m@@ -1852,7 +1852,14 @@[m [mucp_worker_print_used_tls(ucp_worker_h worker, ucp_worker_cfg_index_t cfg_index)[m
 [m
     ucs_string_buffer_rtrim(&strb, "; ");[m
 [m
[32m+[m[32m    // modify here[m
     ucs_info("%s", ucs_string_buffer_cstr(&strb));[m
[32m+[m[41m    [m
[32m+[m[32m    //ucp_config_print(NULL, stdout, NULL, UCS_CONFIG_PRINT_TLS);[m
[32m+[m[32m    ucs_config_parser_print_env_vars_once(context->config.env_prefix);[m
[32m+[m[32m    fprintf(stdout, "%s\n",  ucs_string_buffer_cstr(&strb));[m
[32m+[m[41m    [m
[32m+[m
 }[m
 [m
 static ucs_status_t ucp_worker_init_mpools(ucp_worker_h worker)[m
[36m@@ -2501,7 +2508,8 @@[m [mucs_status_t ucp_worker_create(ucp_context_h context,[m
     /* At this point all UCT memory domains and interfaces are already created[m
      * so print used environment variables and warn about unused ones.[m
      */[m
[31m-    ucs_config_parser_print_env_vars_once(context->config.env_prefix);[m
[32m+[m[32m    // modify here[m
[32m+[m[32m    //ucs_config_parser_print_env_vars_once(context->config.env_prefix);[m
 [m
     /* Warn unused cached uct configuration */[m
     ucp_warn_unused_uct_config(context);[m
[1mdiff --git a/src/ucs/config/parser.c b/src/ucs/config/parser.c[m
[1mindex 82bc04b..0a0ddb8 100644[m
[1m--- a/src/ucs/config/parser.c[m
[1m+++ b/src/ucs/config/parser.c[m
[36m@@ -1878,10 +1878,18 @@[m [mvoid ucs_config_parser_print_opts(FILE *stream, const char *title, const void *o[m
     }[m
 [m
     // TODO: PP-HW4[m
[31m-    if (flags /*& UCS_CONFIG_PRINT_TLS*/) {[m
[31m-[m
[32m+[m[32m    if (flags & UCS_CONFIG_PRINT_TLS) {[m
[32m+[m[32m        //print the UCX_TLS[m
[32m+[m[32m        //const char *ucx_tls_value = get_ucx_tls_value();[m
[32m+[m[32m        //fprintf(stdout, "UCX_TLS=%s\n", ucs_ucx_tls_value);[m
[32m+[m[41m        [m
     }[m
 [m
[32m+[m[32m    // {[m
[32m+[m[32m    // char* test_ucx_tls_value = get_ucx_tls_value();[m
[32m+[m[32m    // fprintf(stdout, "UCX_TLS=%s", test_ucx_tls_value);[m
[32m+[m[32m    // }[m
[32m+[m
     if (flags & UCS_CONFIG_PRINT_HEADER) {[m
         fprintf(stream, "\n");[m
     }[m
[36m@@ -1992,9 +2000,10 @@[m [mstatic void ucs_config_parser_print_env_vars(const char *prefix)[m
     ucs_string_buffer_t used_vars_strb;[m
     ucs_string_buffer_t unused_vars_strb;[m
 [m
[31m-    if (!ucs_config_parser_env_vars_track()) {[m
[31m-        return;[m
[31m-    }[m
[32m+[m[32m    // modify here[m
[32m+[m[32m    // if (!ucs_config_parser_env_vars_track()) {[m
[32m+[m[32m    //     return;[m
[32m+[m[32m    // }[m
 [m
     prefix_len      = strlen(prefix);[m
     num_unused_vars = 0;[m
[36m@@ -2017,6 +2026,14 @@[m [mstatic void ucs_config_parser_print_env_vars(const char *prefix)[m
             continue; /* Not UCX */[m
         }[m
 [m
[32m+[m[32m        // modify here[m
[32m+[m[32m        if (strcmp(var_name, "UCX_TLS") == 0) {[m
[32m+[m[32m            fprintf(stdout, "UCX_TLS=%s\n", saveptr);[m
[32m+[m[32m            //char *ucs_ucx_tls_value = NULL;[m
[32m+[m[32m            //ucs_ucx_tls_value = malloc(strlen(saveptr) + 1);[m
[32m+[m[32m            //strcpy(ucs_ucx_tls_value, saveptr);;[m
[32m+[m[32m        }[m
[32m+[m
         iter = kh_get(ucs_config_env_vars, &ucs_config_parser_env_vars, var_name);[m
         if (iter == kh_end(&ucs_config_parser_env_vars)) {[m
             if (ucs_global_opts.warn_unused_env_vars) {[m
[36m@@ -2059,18 +2076,23 @@[m [mstatic void ucs_config_parser_print_env_vars(const char *prefix)[m
 void ucs_config_parser_print_env_vars_once(const char *env_prefix)[m
 {[m
     const char   *sub_prefix = NULL;[m
[31m-    int          added;[m
[32m+[m[32m    //int          added;[m
     ucs_status_t status;[m
 [m
[32m+[m[32m    //modify here[m
[32m+[m[32m    //fprintf(stdout, "once\n");[m
[32m+[m
     /* Although env_prefix is not real environment variable put it[m
      * into table anyway to save prefixes which was already checked.[m
      * Need to save both env_prefix and base_prefix */[m
[31m-    ucs_config_parser_mark_env_var_used(env_prefix, &added);[m
[31m-    if (!added) {[m
[31m-        return;[m
[31m-    }[m
[32m+[m[32m    // ucs_config_parser_mark_env_var_used(env_prefix, &added);[m
[32m+[m[32m    // //fprintf(stdout, "once_end\n");[m
[32m+[m[32m    // if (!added) {[m
[32m+[m[32m    //     return;[m
[32m+[m[32m    // }[m
 [m
     ucs_config_parser_print_env_vars(env_prefix);[m
[32m+[m[32m    //fprintf(stdout, "env_prefix\n");[m
 [m
     status = ucs_config_parser_get_sub_prefix(env_prefix, &sub_prefix);[m
     if (status != UCS_OK) {[m
[36m@@ -2081,12 +2103,13 @@[m [mvoid ucs_config_parser_print_env_vars_once(const char *env_prefix)[m
         return;[m
     }[m
 [m
[31m-    ucs_config_parser_mark_env_var_used(sub_prefix, &added);[m
[31m-    if (!added) {[m
[31m-        return;[m
[31m-    }[m
[32m+[m[32m    // ucs_config_parser_mark_env_var_used(sub_prefix, &added);[m
[32m+[m[32m    // if (!added) {[m
[32m+[m[32m    //     return;[m
[32m+[m[32m    // }[m
 [m
     ucs_config_parser_print_env_vars(sub_prefix);[m
[32m+[m[32m    //fprintf(stdout, "sub_prefix\n");[m
 }[m
 [m
 size_t ucs_config_memunits_get(size_t config_size, size_t auto_size,[m
[1mdiff --git a/src/ucs/config/types.h b/src/ucs/config/types.h[m
[1mindex c300a6b..cdb03c7 100644[m
[1m--- a/src/ucs/config/types.h[m
[1m+++ b/src/ucs/config/types.h[m
[36m@@ -90,7 +90,9 @@[m [mtypedef enum {[m
     UCS_CONFIG_PRINT_HEADER          = UCS_BIT(1),[m
     UCS_CONFIG_PRINT_DOC             = UCS_BIT(2),[m
     UCS_CONFIG_PRINT_HIDDEN          = UCS_BIT(3),[m
[31m-    UCS_CONFIG_PRINT_COMMENT_DEFAULT = UCS_BIT(4)[m
[32m+[m[32m    UCS_CONFIG_PRINT_COMMENT_DEFAULT = UCS_BIT(4),[m
[32m+[m[32m    // modify here[m
[32m+[m[32m    UCS_CONFIG_PRINT_TLS = UCS_BIT(5)[m
 } ucs_config_print_flags_t;[m
 [m
 [m
[1mdiff --git a/test/run.batch b/test/run.batch[m
[1mindex fff0b3b..06a7311 100644[m
[1m--- a/test/run.batch[m
[1m+++ b/test/run.batch[m
[36m@@ -15,5 +15,8 @@[m [mld_preload_paths=$(find "$ucx_lib_directory" -name 'libucp.so.0' -o -name 'libuc[m
 [m
 echo $ld_preload_paths[m
 [m
[32m+[m[32mexport UCX_TLS=all[m
[32m+[m[32mexport UCX_NET_DEVICES=enp4s0f0[m
 #srun --export LD_PRELOAD=${ld_preload_paths}:${LD_PRELOAD} /home/ta/willian/osu/osu-micro-benchmarks-7.3/c/mpi/pt2pt/standard/osu_latency[m
[31m-srun --export LD_PRELOAD=${ld_preload_paths}:${LD_PRELOAD} $HOME/UCX-lsalab/test/mpi/osu/pt2pt/standard/osu_latency[m
[32m+[m[32m#srun --export LD_PRELOAD=${ld_preload_paths}:${LD_PRELOAD} $HOME/hw4/UCX-lsalab/test/mpi/osu/pt2pt/standard/osu_latency[m
[32m+[m[32msrun --export LD_PRELOAD=${ld_preload_paths}:${LD_PRELOAD}  $HOME/hw4/UCX-lsalab/test/mpi/osu/pt2pt/standard/osu_latency[m
